import React from 'react';
import { render, screen, waitFor } from '@testing-library/react';
import { MemoryRouter } from 'react-router-dom';
import axios from 'axios';
import CreateCDMPDataplexConfig from './CreateCDMPDataplexConfig';

// Mock dependencies
jest.mock('@wf/react-library', () => ({
  useAppGlobalState: () => ({ token: 'mock-token' }),
}));

jest.mock('../../util/Constant', () => ({
  MICROSERVICE_URL: 'http://mock-microservice',
}));

jest.mock('../../Authentication', () => ({
  generateSearHeader: jest.fn(() => ({ Authorization: 'Bearer mock-token' })),
}));

jest.mock('./IngressDataplexNavigation', () => () => (
  <div>Mocked IngressDataplexNavigation</div>
));

jest.mock('axios');

describe('CreateCDMPDataplexConfig Component', () => {
  it('fetches metadata and renders component correctly', async () => {
    const mockData = { name: 'Test Metadata', values: [1, 2, 3] };
    axios.get.mockResolvedValueOnce({ data: mockData });

    render(
      <MemoryRouter initialEntries={[{ pathname: '/', state: 'REQ456' }]}>
        <CreateCDMPDataplexConfig />
      </MemoryRouter>
    );

    expect(screen.getByText('Mocked IngressDataplexNavigation')).toBeInTheDocument();

    await waitFor(() =>
      expect(screen.getByText(/Test Metadata/)).toBeInTheDocument()
    );
  });

  it('handles fetch error gracefully', async () => {
    axios.get.mockRejectedValueOnce(new Error('Fetch failed'));

    render(
      <MemoryRouter initialEntries={[{ pathname: '/', state: 'REQ789' }]}>
        <CreateCDMPDataplexConfig />
      </MemoryRouter>
    );

    expect(screen.getByText('Mocked IngressDataplexNavigation')).toBeInTheDocument();

    await waitFor(() => {
      expect(axios.get).toHaveBeenCalled();
    });
  });
});