import React from 'react';
import { render, screen, fireEvent } from '@testing-library/react';
import '@testing-library/jest-dom';
import ApproversTable from './ApproversTable';

describe("ApproversTable Component", () => {
  const mockItems = [
    { applicationName: "App1", domainName: "Domain1", columnName: "Column1", status: "Approved" },
    { applicationName: "App2", domainName: "Domain2", columnName: "Column2", status: "Rejected" },
    { applicationName: "App3", domainName: "Domain3", columnName: "Column3", status: "Others" },
  ];

  it("renders the table headers correctly", () => {
    render(<ApproversTable items={mockItems} />);

    expect(screen.getByText("Application Name")).toBeInTheDocument();
    expect(screen.getByText("Data Domain")).toBeInTheDocument();
    expect(screen.getByText("Column Name")).toBeInTheDocument();
    expect(screen.getByText("Status")).toBeInTheDocument();
    expect(screen.getByText("View")).toBeInTheDocument();
  });

  it("renders all items when approval status is 'Others'", () => {
    render(<ApproversTable items={mockItems} />);

    expect(screen.getByText("App1")).toBeInTheDocument();
    expect(screen.getByText("App2")).toBeInTheDocument();
    expect(screen.getByText("App3")).toBeInTheDocument();
  });

  it("filters items based on selected approval status", () => {
    render(<ApproversTable items={mockItems} />);

    // Simulate dropdown selection
    fireEvent.click(screen.getByText("Status"));
    fireEvent.click(screen.getByText("Approved"));

    expect(screen.getByText("App1")).toBeInTheDocument();
    expect(screen.queryByText("App2")).not.toBeInTheDocument();
    expect(screen.queryByText("App3")).not.toBeInTheDocument();
  });

  it("displays negative styling for rejected status", () => {
    render(<ApproversTable items={mockItems} />);
    expect(screen.getByText("Rejected").closest('td')).toHaveAttribute("negative");
  });

  it("displays the view button", () => {
    render(<ApproversTable items={mockItems} />);
    expect(screen.getAllByText("View")).toHaveLength(3);
  });
});