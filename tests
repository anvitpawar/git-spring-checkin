// addapppoint.test.jsx
import React from 'react';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import AddAppPoint from './addapppoint';
import '@testing-library/jest-dom/extend-expect';

describe('AddAppPoint Component', () => {
  beforeEach(() => {
    global.fetch = jest.fn(() =>
      Promise.resolve({
        json: () => Promise.resolve({ message: 'Form submitted successfully' }),
      })
    );
  });

  afterEach(() => {
    jest.clearAllMocks();
  });

  test('renders AddAppPoint component correctly', () => {
    render(<AddAppPoint />);
    
    expect(screen.getByText('Onboard Application')).toBeInTheDocument();
    expect(screen.getByPlaceholderText('Enter Application Name')).toBeInTheDocument();
    expect(screen.getByPlaceholderText('Enter Tech Manager Email')).toBeInTheDocument();
  });

  test('handles input change correctly', () => {
    render(<AddAppPoint />);

    fireEvent.change(screen.getByPlaceholderText('Enter Application Name'), {
      target: { value: 'Test Application', name: 'applicationName' },
    });

    expect(screen.getByPlaceholderText('Enter Application Name').value).toBe('Test Application');
  });

  test('submits form successfully', async () => {
    render(<AddAppPoint />);

    fireEvent.change(screen.getByPlaceholderText('Enter Application Name'), {
      target: { value: 'Test Application', name: 'applicationName' },
    });

    fireEvent.click(screen.getByText('Submit'));

    await waitFor(() => expect(global.fetch).toHaveBeenCalledTimes(1));
    await waitFor(() => expect(global.fetch).toHaveBeenCalledWith(
      'http://localhost:8888/api/v1/applications',
      expect.objectContaining({
        method: 'POST',
        body: JSON.stringify({
          applicationName: 'Test Application',
          techManagerEmail: '',
          altManagerEmail: '',
          abo: '',
          alternateAbo: '',
          dcapEmail: ''
        }),
      })
    ));

    expect(screen.getByText('Onboard Application')).toBeInTheDocument();
  });

  test('handles reset correctly', () => {
    render(<AddAppPoint />);

    fireEvent.change(screen.getByPlaceholderText('Enter Application Name'), {
      target: { value: 'Test Application', name: 'applicationName' },
    });

    fireEvent.click(screen.getByText('Cancel'));

    expect(screen.getByPlaceholderText('Enter Application Name').value).toBe('');
  });

  test('handles error on form submission', async () => {
    global.fetch.mockImplementationOnce(() => Promise.reject('API is down'));

    render(<AddAppPoint />);

    fireEvent.change(screen.getByPlaceholderText('Enter Application Name'), {
      target: { value: 'Test Application', name: 'applicationName' },
    });

    fireEvent.click(screen.getByText('Submit'));

    await waitFor(() => expect(global.fetch).toHaveBeenCalledTimes(1));
  });
});