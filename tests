Awesome — here’s Step 1: updated version of parseProfileString that handles environment block grouping and tagging each line.

⸻

✅ parseProfileString — Handles:
	•	Plaintext detection (for if, elif, else, fi, etc.)
	•	Recognizes environment groups (dev, sit, uat, else)
	•	Tags key-value lines with envGroup to sync later

⸻



function parseProfileString(profileString) {
  const lines = profileString.split('\n');
  const result = [];
  let currentEnvGroup = null;

  lines.forEach((line) => {
    const trimmed = line.trim();

    // Detect plain text lines like if, elif, else, fi, etc.
    const isPlainText =
      /^(if|elif|else|fi)/.test(trimmed) || trimmed.startsWith('echo') || trimmed === '';

    // Detect start of environment block
    if (/if\s*\[\s*\$env\s*==?\s*["']?dev["']?\s*\]/.test(trimmed)) {
      currentEnvGroup = 'dev';
    } else if (/if\s*\[\s*\$env\s*==?\s*["']?sit["']?\s*\]/.test(trimmed)) {
      currentEnvGroup = 'sit';
    } else if (/if\s*\[\s*\$env\s*==?\s*["']?uat["']?\s*\]/.test(trimmed)) {
      currentEnvGroup = 'uat';
    } else if (/else/.test(trimmed)) {
      currentEnvGroup = 'else';
    } else if (/fi/.test(trimmed)) {
      currentEnvGroup = null;
    }

    // Handle key-value pairs (only export lines)
    if (trimmed.startsWith('export') && !isPlainText) {
      const lineWithoutExport = trimmed.replace(/^export\s+/, '');
      let key, value, delimiter;

      if (lineWithoutExport.includes('=')) {
        [key, value] = lineWithoutExport.split('=');
        delimiter = 'equal';
      } else if (lineWithoutExport.includes(':')) {
        [key, value] = lineWithoutExport.split(':');
        delimiter = 'colon';
      }

      if (key && value !== undefined) {
        result.push({
          key: key.trim(),
          value: value.trim(),
          delimiter,
          isPlainText: false,
          envGroup: currentEnvGroup,
          isAPP: key.trim().startsWith('APP_'),
        });
      } else {
        // Handle malformed or empty key-value lines as plain text
        result.push({
          text: trimmed,
          isPlainText: true,
        });
      }
    } else {
      // Handle all non-key-value lines
      result.push({
        text: trimmed,
        isPlainText: true,
        envGroup: currentEnvGroup,
      });
    }
  });

  return result;
}



⸻

Next: I’ll send the updated profileArrayToString that respects the env grouping and plain text. Shall I continue?


Great — here’s Step 2: updated profileArrayToString that safely converts the structured array back to the profile string, respecting your delimiter logic and formatting.

⸻

✅ profileArrayToString — Handles:
	•	Conversion from array back to profile string
	•	Supports = or : delimiter
	•	Skips empty keys
	•	Preserves isPlainText lines as-is

⸻



function profileArrayToString(pairs) {
  return pairs
    .map((item) => {
      if (item.isPlainText) return item.text;

      const { key, value, delimiter } = item;

      if (!key && !value) return '';
      if (key && !value) return key;

      if (delimiter === 'equal') {
        return `export ${key}=${value}`;
      } else if (delimiter === 'colon') {
        return `export ${key}:${value}`;
      }

      return `export ${key}=${value}`; // default fallback
    })
    .join('\n');
}



⸻

This will ensure:
	•	APP_ and other exports are formatted properly
	•	Environment group values show up cleanly
	•	No extra lines or malformed exports

⸻

Next up: the core UI logic inside KeyValuePair.jsx — with add/remove buttons specific to environment blocks. Ready?
