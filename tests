import React from "react";
import { render, screen } from "@testing-library/react";
import "@testing-library/jest-dom";
import Dropdown from "./Dropdown";

const mockSubmenus = [
  { title: "Item 1" },
  { title: "Item 2" },
  { title: "Item 3" }
];

jest.mock("./MenuItems", () => ({ items, depthLevel }) => (
  <li data-testid="menu-item">{items.title}</li>
));

describe("Dropdown Component", () => {

  it("renders without crashing", () => {
    render(<Dropdown submenus={[]} dropdown={false} />);
    expect(screen.getByRole("list")).toBeInTheDocument();
  });

  it("renders all submenus correctly", () => {
    render(<Dropdown submenus={mockSubmenus} dropdown={true} />);
    const items = screen.getAllByTestId("menu-item");
    expect(items).toHaveLength(mockSubmenus.length);
    expect(items[0]).toHaveTextContent("Item 1");
    expect(items[1]).toHaveTextContent("Item 2");
    expect(items[2]).toHaveTextContent("Item 3");
  });

  it("applies the correct CSS class when dropdown is active", () => {
    render(<Dropdown submenus={mockSubmenus} dropdown={true} />);
    expect(screen.getByRole("list")).toHaveClass("show");
  });

  it("does not apply the show class when dropdown is inactive", () => {
    render(<Dropdown submenus={mockSubmenus} dropdown={false} />);
    expect(screen.getByRole("list")).not.toHaveClass("show");
  });

  it("applies the correct depth level class", () => {
    render(<Dropdown submenus={mockSubmenus} dropdown={true} depthLevel={2} />);
    expect(screen.getByRole("list")).toHaveClass("dropdown-submenu");
  });

});