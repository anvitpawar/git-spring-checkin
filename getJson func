const handleDownload = () => {
    try {
        // Extract JSON from Live JSON Preview
        const jsonData = getJsonData(); // Ensure this correctly fetches the JSON object

        if (!jsonData) {
            alert("Invalid JSON data!");
            return;
        }

        // Validate required fields (ensure no null, empty, or undefined values)
        if (!validateFields(jsonData)) {
            alert("Some required fields are missing or empty. Please fill them before downloading.");
            return;
        }

        // Convert JSON object to a properly formatted string (4-space indentation)
        const jsonString = JSON.stringify(jsonData, null, 4);

        // Create a Blob with proper encoding
        const blob = new Blob([jsonString], { type: "application/json;charset=utf-8" });

        // Create a temporary anchor element
        const link = document.createElement("a");
        link.href = URL.createObjectURL(blob);
        link.download = "data.json";

        // Trigger the download
        document.body.appendChild(link);
        link.click();

        // Cleanup
        document.body.removeChild(link);
        URL.revokeObjectURL(link.href);
    } catch (error) {
        console.error("Error while downloading JSON:", error);
    }
};




const validateFields = (obj) => {
    if (typeof obj !== "object" || obj === null) {
        return obj !== "" && obj !== null && obj !== undefined; // Ensure value is non-empty
    }

    if (Array.isArray(obj)) {
        return obj.length > 0 && obj.every(validateFields); // Ensure array is not empty and validate elements
    }

    for (const key in obj) {
        if (obj.hasOwnProperty(key)) {
            const value = obj[key];

            if (typeof value === "string" && value.trim() === "") {
                console.warn(`Empty value for key: ${key}`);
                return false;
            }
            
            if (value === null || value === undefined) {
                console.warn(`Missing value for key: ${key}`);
                return false;
            }

            if (typeof value === "object" && !validateFields(value)) {
                return false; // Recursively validate nested objects
            }
        }
    }
    return true;
};
