📌 Sample Input & Output for GitHub OAuth Integration with React & Spring Boot

⸻

🔹 Step 1: GitHub OAuth Authentication

🔹 Input (User Logs in via GitHub)
	•	Frontend Redirects User to GitHub OAuth:

https://github.com/login/oauth/authorize?client_id=YOUR_CLIENT_ID&scope=repo


	•	GitHub Returns an Authorization Code:

code=abc123xyz


	•	Backend Exchanges Code for OAuth Token:

POST /login/oauth/access_token
{
  "client_id": "YOUR_CLIENT_ID",
  "client_secret": "YOUR_SECRET",
  "code": "abc123xyz"
}



🔹 Output (OAuth Token is Returned)

{
  "access_token": "gho_abc123xyz",
  "token_type": "bearer",
  "scope": "repo"
}



⸻

🔹 Step 2: Repository Selection & Access Verification

🔹 Input (User Chooses a Repository from UI)

{
  "selectedRepo": "repo1"
}

🔹 Backend Checks Access
	•	API Call:

GET /repos/{owner}/repo1
Authorization: Bearer gho_abc123xyz


	•	GitHub Response:

{
  "permissions": {
    "pull": true,
    "push": true,
    "admin": false
  }
}



🔹 Output (User Has Access)

{
  "status": "success",
  "message": "User has write access to repo1"
}



⸻

🔹 Step 3: Fetching Repository Folder Structure

🔹 API Call

GET /repos/{owner}/repo1/git/trees/main?recursive=1
Authorization: Bearer gho_abc123xyz

🔹 GitHub Response

{
  "tree": [
    { "path": "config/settings.json", "type": "blob" },
    { "path": "scripts/setup.ksh", "type": "blob" },
    { "path": "src/main/config.properties", "type": "blob" },
    { "path": "README.md", "type": "blob" }
  ]
}

🔹 Output (Filtered Files)

{
  "files": [
    "config/settings.json",
    "scripts/setup.ksh",
    "src/main/config.properties"
  ]
}



⸻

🔹 Step 4: Fetching Matching Files from MongoDB

🔹 Input (Required Extensions)

{
  "extensions": [".json", ".ksh", ".hal", ".config", ".properties", ".txt"]
}

🔹 MongoDB Data

[
  { "filePath": "config/settings.json", "content": "{ 'theme': 'dark' }" },
  { "filePath": "scripts/setup.ksh", "content": "echo 'Setup complete'" }
]

🔹 Output

{
  "filesToUpload": [
    { "path": "config/settings.json", "content": "{ 'theme': 'dark' }" },
    { "path": "scripts/setup.ksh", "content": "echo 'Setup complete'" }
  ]
}



⸻

🔹 Step 5: Displaying File Paths & Progress in UI

🔹 UI Display

📂 repo1
   📄 config/settings.json
   📄 scripts/setup.ksh
   📄 src/main/config.properties

⸻

🔹 Step 6: Committing & Pushing Files

🔹 Input (User Enters Commit Message & Presses Commit)

{
  "commitMessage": "Updated configuration files"
}

🔹 API Call to Upload File

PUT /repos/{owner}/repo1/contents/config/settings.json
Authorization: Bearer gho_abc123xyz
Content-Type: application/json

Body:

{
  "message": "Updated configuration files",
  "content": "eyAndGhlbWUnOiAnZGFyayd9Cg==",
  "branch": "main"
}

🔹 Output (GitHub Response)

{
  "commit": {
    "sha": "abc987xyz",
    "message": "Updated configuration files"
  }
}



⸻

🔹 Step 7: Showing Commit Status in UI

🔹 UI Displays Commit Success

✅ Commit Successful!

⸻

🎯 Summary of Input & Output

Step	Input	API Call	Output
1. OAuth Login	User logs in	Exchange Code for Token	OAuth Token Returned
2. Repo Access Check	Selected repo = “repo1”	Check user permissions	User has write access
3. Fetch Repo Structure	“repo1”	Get repo file tree	List of matching files
4. Fetch MongoDB Files	Required extensions	Query MongoDB	Matching files returned
5. Show UI Progress	Files to upload	N/A	Display file paths
6. Commit & Push	User enters commit message	Upload files to GitHub	GitHub commit success
7. Show Commit Status	Commit request	Check commit status	“Commit Successful”

This covers the complete flow end to end. Do you need any modifications or enhancements? 🚀





🔹 Step-by-Step Guide for Full GitHub Repository Integration

This guide ensures:
✅ The user selects a GitHub repository
✅ We verify access to the repository
✅ We fetch the folder structure of required file types
✅ We fetch files from MongoDB
✅ The file path & progress report is shown in the UI
✅ The user commits & pushes the latest files to GitHub

⸻

🔹 Step 1: User Selects a Repository

Modify GitHubController.java to fetch the user’s repositories.

@GetMapping("/repos")
public ResponseEntity<?> getUserRepositories(OAuth2AuthenticationToken authentication) {
    String token = gitHubService.getAccessToken(authentication);
    String apiUrl = "https://api.github.com/user/repos";

    HttpHeaders headers = new HttpHeaders();
    headers.setBearerAuth(token);
    ResponseEntity<List> response = new RestTemplate().exchange(apiUrl, HttpMethod.GET, new HttpEntity<>(headers), List.class);

    List<String> repoNames = response.getBody().stream()
            .map(repo -> ((Map<String, Object>) repo).get("name").toString())
            .collect(Collectors.toList());

    return ResponseEntity.ok(Map.of("repositories", repoNames));
}

This API fetches all repositories the user has access to.

React UI to List Repositories

import React, { useState, useEffect } from "react";

const GitHubRepoSelector = ({ onRepoSelect }) => {
  const [repos, setRepos] = useState([]);

  useEffect(() => {
    fetch("http://localhost:8080/github/repos", { credentials: "include" })
      .then(res => res.json())
      .then(data => setRepos(data.repositories));
  }, []);

  return (
    <div>
      <h2>Select a Repository</h2>
      <ul>
        {repos.map(repo => (
          <li key={repo} onClick={() => onRepoSelect(repo)}>{repo}</li>
        ))}
      </ul>
    </div>
  );
};

export default GitHubRepoSelector;

Now, the user can click on a repo to select it.

⸻

🔹 Step 2: Verify Repository Access

Modify GitHubService.java to check if the user has write access.

public boolean hasWriteAccess(OAuth2AuthenticationToken authentication, String repoName) {
    String token = getAccessToken(authentication);
    String apiUrl = "https://api.github.com/repos/" + repoName;

    HttpHeaders headers = new HttpHeaders();
    headers.setBearerAuth(token);
    ResponseEntity<Map> response = new RestTemplate().exchange(apiUrl, HttpMethod.GET, new HttpEntity<>(headers), Map.class);

    Map<String, Object> permissions = (Map<String, Object>) response.getBody().get("permissions");
    return permissions != null && Boolean.TRUE.equals(permissions.get("push"));
}

Now we check repository permissions before proceeding.

⸻

🔹 Step 3: Fetch Repository Folder Structure

Modify GitHubController.java to get only required file types.

@GetMapping("/fetch-files")
public ResponseEntity<?> fetchRepoFiles(OAuth2AuthenticationToken authentication, @RequestParam String repoName) {
    if (!gitHubService.hasWriteAccess(authentication, repoName)) {
        return ResponseEntity.status(HttpStatus.FORBIDDEN).body("User does not have write access");
    }

    String token = gitHubService.getAccessToken(authentication);
    String apiUrl = "https://api.github.com/repos/" + repoName + "/git/trees/main?recursive=1";

    HttpHeaders headers = new HttpHeaders();
    headers.setBearerAuth(token);
    ResponseEntity<Map> response = new RestTemplate().exchange(apiUrl, HttpMethod.GET, new HttpEntity<>(headers), Map.class);

    List<Map<String, String>> tree = (List<Map<String, String>>) response.getBody().get("tree");
    List<String> requiredFiles = new ArrayList<>();
    List<String> allowedExtensions = List.of(".json", ".ksh", ".hal", ".config", ".properties", ".txt");

    for (Map<String, String> item : tree) {
        String path = item.get("path");
        if (item.get("type").equals("blob") && allowedExtensions.stream().anyMatch(path::endsWith)) {
            requiredFiles.add(path);
        }
    }

    return ResponseEntity.ok(Map.of("files", requiredFiles));
}

✅ Fetches only specific file types
✅ Validates write access before proceeding

⸻

🔹 Step 4: Fetch Required Files from MongoDB

Modify MongoDBService.java to retrieve files.

import org.springframework.stereotype.Service;
import org.springframework.data.mongodb.core.MongoTemplate;
import org.springframework.data.mongodb.core.query.Criteria;
import org.springframework.data.mongodb.core.query.Query;
import java.util.List;

@Service
public class MongoDBService {
    private final MongoTemplate mongoTemplate;

    public MongoDBService(MongoTemplate mongoTemplate) {
        this.mongoTemplate = mongoTemplate;
    }

    public List<FileDocument> getFilesForUpload(List<String> fileExtensions) {
        Query query = new Query(Criteria.where("extension").in(fileExtensions));
        return mongoTemplate.find(query, FileDocument.class);
    }
}



⸻

🔹 Step 5: Show File Paths & Progress Report in React

Modify GitHubRepoSelector.jsx.

const fetchFiles = async (repo) => {
  const res = await fetch(`http://localhost:8080/github/fetch-files?repoName=${repo}`, { credentials: "include" });
  const data = await res.json();
  setFiles(data.files);
};

Display file paths and progress:

<ul>{files.map((file, i) => <li key={i}>{file}</li>)}</ul>



⸻

🔹 Step 6: Commit & Push Changes to GitHub

Modify GitHubController.java to commit & push MongoDB files.

@PostMapping("/commit-files")
public ResponseEntity<?> commitFilesToRepo(OAuth2AuthenticationToken authentication, @RequestParam String repoName, @RequestBody Map<String, String> commitData) {
    String token = gitHubService.getAccessToken(authentication);
    List<FileDocument> files = mongoDBService.getFilesForUpload(List.of(".json", ".ksh", ".hal", ".config", ".properties", ".txt"));

    for (FileDocument file : files) {
        String apiUrl = "https://api.github.com/repos/" + repoName + "/contents/" + file.getFilePath();

        HttpHeaders headers = new HttpHeaders();
        headers.setBearerAuth(token);
        headers.setContentType(MediaType.APPLICATION_JSON);

        Map<String, Object> payload = Map.of(
            "message", commitData.get("commitMessage"),
            "content", Base64.getEncoder().encodeToString(file.getContent().getBytes()),
            "branch", "main"
        );

        new RestTemplate().exchange(apiUrl, HttpMethod.PUT, new HttpEntity<>(payload, headers), String.class);
    }

    return ResponseEntity.ok("Files committed and pushed successfully");
}

✅ Encodes files as Base64 before pushing
✅ Uses GitHub’s API to commit & push

⸻

🔹 Step 7: React UI for Commit Button

const commitChanges = async () => {
  const commitMessage = prompt("Enter commit message:");
  const res = await fetch(`http://localhost:8080/github/commit-files?repoName=${selectedRepo}`, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({ commitMessage }),
    credentials: "include"
  });

  alert(await res.text());
};

Add a Commit Button:

<button onClick={commitChanges}>Commit & Push to GitHub</button>



⸻

🎯 Summary

✅ User selects a repository
✅ Access verification is done
✅ Folder structure is fetched
✅ Files are retrieved from MongoDB
✅ File paths & progress report are shown
✅ User enters commit message & files are pushed

Would you like to add error handling or logging for debugging? 🚀