ðŸ”¹ Step-by-Step Guide for Full GitHub Repository Integration

This guide ensures:
âœ… The user selects a GitHub repository
âœ… We verify access to the repository
âœ… We fetch the folder structure of required file types
âœ… We fetch files from MongoDB
âœ… The file path & progress report is shown in the UI
âœ… The user commits & pushes the latest files to GitHub

â¸»

ðŸ”¹ Step 1: User Selects a Repository

Modify GitHubController.java to fetch the userâ€™s repositories.

@GetMapping("/repos")
public ResponseEntity<?> getUserRepositories(OAuth2AuthenticationToken authentication) {
    String token = gitHubService.getAccessToken(authentication);
    String apiUrl = "https://api.github.com/user/repos";

    HttpHeaders headers = new HttpHeaders();
    headers.setBearerAuth(token);
    ResponseEntity<List> response = new RestTemplate().exchange(apiUrl, HttpMethod.GET, new HttpEntity<>(headers), List.class);

    List<String> repoNames = response.getBody().stream()
            .map(repo -> ((Map<String, Object>) repo).get("name").toString())
            .collect(Collectors.toList());

    return ResponseEntity.ok(Map.of("repositories", repoNames));
}

This API fetches all repositories the user has access to.

React UI to List Repositories

import React, { useState, useEffect } from "react";

const GitHubRepoSelector = ({ onRepoSelect }) => {
  const [repos, setRepos] = useState([]);

  useEffect(() => {
    fetch("http://localhost:8080/github/repos", { credentials: "include" })
      .then(res => res.json())
      .then(data => setRepos(data.repositories));
  }, []);

  return (
    <div>
      <h2>Select a Repository</h2>
      <ul>
        {repos.map(repo => (
          <li key={repo} onClick={() => onRepoSelect(repo)}>{repo}</li>
        ))}
      </ul>
    </div>
  );
};

export default GitHubRepoSelector;

Now, the user can click on a repo to select it.

â¸»

ðŸ”¹ Step 2: Verify Repository Access

Modify GitHubService.java to check if the user has write access.

public boolean hasWriteAccess(OAuth2AuthenticationToken authentication, String repoName) {
    String token = getAccessToken(authentication);
    String apiUrl = "https://api.github.com/repos/" + repoName;

    HttpHeaders headers = new HttpHeaders();
    headers.setBearerAuth(token);
    ResponseEntity<Map> response = new RestTemplate().exchange(apiUrl, HttpMethod.GET, new HttpEntity<>(headers), Map.class);

    Map<String, Object> permissions = (Map<String, Object>) response.getBody().get("permissions");
    return permissions != null && Boolean.TRUE.equals(permissions.get("push"));
}

Now we check repository permissions before proceeding.

â¸»

ðŸ”¹ Step 3: Fetch Repository Folder Structure

Modify GitHubController.java to get only required file types.

@GetMapping("/fetch-files")
public ResponseEntity<?> fetchRepoFiles(OAuth2AuthenticationToken authentication, @RequestParam String repoName) {
    if (!gitHubService.hasWriteAccess(authentication, repoName)) {
        return ResponseEntity.status(HttpStatus.FORBIDDEN).body("User does not have write access");
    }

    String token = gitHubService.getAccessToken(authentication);
    String apiUrl = "https://api.github.com/repos/" + repoName + "/git/trees/main?recursive=1";

    HttpHeaders headers = new HttpHeaders();
    headers.setBearerAuth(token);
    ResponseEntity<Map> response = new RestTemplate().exchange(apiUrl, HttpMethod.GET, new HttpEntity<>(headers), Map.class);

    List<Map<String, String>> tree = (List<Map<String, String>>) response.getBody().get("tree");
    List<String> requiredFiles = new ArrayList<>();
    List<String> allowedExtensions = List.of(".json", ".ksh", ".hal", ".config", ".properties", ".txt");

    for (Map<String, String> item : tree) {
        String path = item.get("path");
        if (item.get("type").equals("blob") && allowedExtensions.stream().anyMatch(path::endsWith)) {
            requiredFiles.add(path);
        }
    }

    return ResponseEntity.ok(Map.of("files", requiredFiles));
}

âœ… Fetches only specific file types
âœ… Validates write access before proceeding

â¸»

ðŸ”¹ Step 4: Fetch Required Files from MongoDB

Modify MongoDBService.java to retrieve files.

import org.springframework.stereotype.Service;
import org.springframework.data.mongodb.core.MongoTemplate;
import org.springframework.data.mongodb.core.query.Criteria;
import org.springframework.data.mongodb.core.query.Query;
import java.util.List;

@Service
public class MongoDBService {
    private final MongoTemplate mongoTemplate;

    public MongoDBService(MongoTemplate mongoTemplate) {
        this.mongoTemplate = mongoTemplate;
    }

    public List<FileDocument> getFilesForUpload(List<String> fileExtensions) {
        Query query = new Query(Criteria.where("extension").in(fileExtensions));
        return mongoTemplate.find(query, FileDocument.class);
    }
}



â¸»

ðŸ”¹ Step 5: Show File Paths & Progress Report in React

Modify GitHubRepoSelector.jsx.

const fetchFiles = async (repo) => {
  const res = await fetch(`http://localhost:8080/github/fetch-files?repoName=${repo}`, { credentials: "include" });
  const data = await res.json();
  setFiles(data.files);
};

Display file paths and progress:

<ul>{files.map((file, i) => <li key={i}>{file}</li>)}</ul>



â¸»

ðŸ”¹ Step 6: Commit & Push Changes to GitHub

Modify GitHubController.java to commit & push MongoDB files.

@PostMapping("/commit-files")
public ResponseEntity<?> commitFilesToRepo(OAuth2AuthenticationToken authentication, @RequestParam String repoName, @RequestBody Map<String, String> commitData) {
    String token = gitHubService.getAccessToken(authentication);
    List<FileDocument> files = mongoDBService.getFilesForUpload(List.of(".json", ".ksh", ".hal", ".config", ".properties", ".txt"));

    for (FileDocument file : files) {
        String apiUrl = "https://api.github.com/repos/" + repoName + "/contents/" + file.getFilePath();

        HttpHeaders headers = new HttpHeaders();
        headers.setBearerAuth(token);
        headers.setContentType(MediaType.APPLICATION_JSON);

        Map<String, Object> payload = Map.of(
            "message", commitData.get("commitMessage"),
            "content", Base64.getEncoder().encodeToString(file.getContent().getBytes()),
            "branch", "main"
        );

        new RestTemplate().exchange(apiUrl, HttpMethod.PUT, new HttpEntity<>(payload, headers), String.class);
    }

    return ResponseEntity.ok("Files committed and pushed successfully");
}

âœ… Encodes files as Base64 before pushing
âœ… Uses GitHubâ€™s API to commit & push

â¸»

ðŸ”¹ Step 7: React UI for Commit Button

const commitChanges = async () => {
  const commitMessage = prompt("Enter commit message:");
  const res = await fetch(`http://localhost:8080/github/commit-files?repoName=${selectedRepo}`, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({ commitMessage }),
    credentials: "include"
  });

  alert(await res.text());
};

Add a Commit Button:

<button onClick={commitChanges}>Commit & Push to GitHub</button>



â¸»

ðŸŽ¯ Summary

âœ… User selects a repository
âœ… Access verification is done
âœ… Folder structure is fetched
âœ… Files are retrieved from MongoDB
âœ… File paths & progress report are shown
âœ… User enters commit message & files are pushed

Would you like to add error handling or logging for debugging? ðŸš€